{"ast":null,"code":"var _jsxFileName = \"/Users/bluemishu/Downloads/Project_solvit2/frontend/src/components/PatientQueue.jsx\",\n  _s = $RefreshSig$();\n// src/components/PatientQueue.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { fetchQueue, completePatient } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientQueue = () => {\n  _s();\n  const [queue, setQueue] = useState([]);\n  const loadQueue = async () => {\n    const data = await fetchQueue();\n    setQueue(data);\n  };\n  useEffect(() => {\n    loadQueue();\n  }, []);\n  const handleComplete = async firestoreId => {\n    if (firestoreId) {\n      await completePatient(firestoreId);\n      loadQueue();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Patient Queue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), queue && queue.length > 0 ? queue.map((patient, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        borderBottom: \"1px solid #ccc\",\n        padding: \"8px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [index + 1, \". \", patient.name, \" (Urgency: \", patient.urgency, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleComplete(patient.firestore_id),\n        children: \"Mark as Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, patient.firestore_id || index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No patients in the queue.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientQueue, \"gnm5c9ihVUjA3R/713RS3rschgA=\");\n_c = PatientQueue;\nexport default PatientQueue;\nvar _c;\n$RefreshReg$(_c, \"PatientQueue\");","map":{"version":3,"names":["React","useState","useEffect","fetchQueue","completePatient","jsxDEV","_jsxDEV","PatientQueue","_s","queue","setQueue","loadQueue","data","handleComplete","firestoreId","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","patient","index","style","borderBottom","padding","name","urgency","onClick","firestore_id","_c","$RefreshReg$"],"sources":["/Users/bluemishu/Downloads/Project_solvit2/frontend/src/components/PatientQueue.jsx"],"sourcesContent":["// src/components/PatientQueue.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { fetchQueue, completePatient } from \"../api\";\n\nconst PatientQueue = () => {\n  const [queue, setQueue] = useState([]);\n\n  const loadQueue = async () => {\n    const data = await fetchQueue();\n    setQueue(data);\n  };\n\n  useEffect(() => {\n    loadQueue();\n  }, []);\n\n  const handleComplete = async (firestoreId) => {\n    if (firestoreId) {\n      await completePatient(firestoreId);\n      loadQueue();\n    }\n  };\n\n  return (\n    <div>\n      <h2>Patient Queue</h2>\n      {queue && queue.length > 0 ? (\n        queue.map((patient, index) => (\n          <div\n            key={patient.firestore_id || index}\n            style={{ borderBottom: \"1px solid #ccc\", padding: \"8px\" }}\n          >\n            <p>\n              {index + 1}. {patient.name} (Urgency: {patient.urgency})\n            </p>\n            <button onClick={() => handleComplete(patient.firestore_id)}>\n              Mark as Completed\n            </button>\n          </div>\n        ))\n      ) : (\n        <p>No patients in the queue.</p>\n      )}\n    </div>\n  );\n};\n\nexport default PatientQueue;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,eAAe,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,IAAI,GAAG,MAAMT,UAAU,CAAC,CAAC;IAC/BO,QAAQ,CAACE,IAAI,CAAC;EAChB,CAAC;EAEDV,SAAS,CAAC,MAAM;IACdS,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,cAAc,GAAG,MAAOC,WAAW,IAAK;IAC5C,IAAIA,WAAW,EAAE;MACf,MAAMV,eAAe,CAACU,WAAW,CAAC;MAClCH,SAAS,CAAC,CAAC;IACb;EACF,CAAC;EAED,oBACEL,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAAS,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBV,KAAK,IAAIA,KAAK,CAACW,MAAM,GAAG,CAAC,GACxBX,KAAK,CAACY,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACvBjB,OAAA;MAEEkB,KAAK,EAAE;QAAEC,YAAY,EAAE,gBAAgB;QAAEC,OAAO,EAAE;MAAM,CAAE;MAAAX,QAAA,gBAE1DT,OAAA;QAAAS,QAAA,GACGQ,KAAK,GAAG,CAAC,EAAC,IAAE,EAACD,OAAO,CAACK,IAAI,EAAC,aAAW,EAACL,OAAO,CAACM,OAAO,EAAC,GACzD;MAAA;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJb,OAAA;QAAQuB,OAAO,EAAEA,CAAA,KAAMhB,cAAc,CAACS,OAAO,CAACQ,YAAY,CAAE;QAAAf,QAAA,EAAC;MAE7D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,GARJG,OAAO,CAACQ,YAAY,IAAIP,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAS/B,CACN,CAAC,gBAEFb,OAAA;MAAAS,QAAA,EAAG;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAChC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACX,EAAA,CAzCID,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AA2ClB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}