{"ast":null,"code":"var _jsxFileName = \"/Users/bluemishu/Downloads/Project_solvit2/frontend/src/components/ForecastCharts.jsx\",\n  _s = $RefreshSig$();\n// src/components/ForecastCharts.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\n// ✅ Required Chart.js registrations\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\n\n// ✅ Register chart components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst ForecastCharts = () => {\n  _s();\n  const [occupancyData, setOccupancyData] = useState(null);\n  const [bedsData, setBedsData] = useState(null);\n  useEffect(() => {\n    fetchOccupancyForecast().then(data => {\n      const labels = Object.keys(data);\n      const values = Object.values(data);\n      setOccupancyData({\n        labels: labels,\n        datasets: [{\n          label: \"Bed Occupancy Forecast (7 Days)\",\n          data: values,\n          fill: false,\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          tension: 0.3\n        }]\n      });\n    });\n    fetchBedsForecast().then(data => {\n      const labels = data.map(item => item.date);\n      const values = data.map(item => item.predicted_beds);\n      setBedsData({\n        labels: labels,\n        datasets: [{\n          label: \"Predicted Beds Forecast (30 Days)\",\n          data: values,\n          fill: false,\n          borderColor: \"rgba(153, 102, 255, 1)\",\n          tension: 0.3\n        }]\n      });\n    });\n  }, []);\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: true,\n        position: \"top\"\n      }\n    },\n    scales: {\n      x: {\n        type: \"category\",\n        // <-- important\n        title: {\n          display: true,\n          text: \"Date\"\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: \"Beds\"\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Forecast Charts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), occupancyData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Bed Occupancy Forecast (7 Days)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: occupancyData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), bedsData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Predicted Beds Forecast (Next 30 Days)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: bedsData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(ForecastCharts, \"38fu/rscUagg01LOjkMM1XyXM7k=\");\n_c = ForecastCharts;\nexport default ForecastCharts;\nvar _c;\n$RefreshReg$(_c, \"ForecastCharts\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","ForecastCharts","_s","occupancyData","setOccupancyData","bedsData","setBedsData","fetchOccupancyForecast","then","data","labels","Object","keys","values","datasets","label","fill","borderColor","tension","fetchBedsForecast","map","item","date","predicted_beds","chartOptions","responsive","plugins","legend","display","position","scales","x","type","title","text","y","beginAtZero","children","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["/Users/bluemishu/Downloads/Project_solvit2/frontend/src/components/ForecastCharts.jsx"],"sourcesContent":["// src/components/ForecastCharts.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\n// ✅ Required Chart.js registrations\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\n// ✅ Register chart components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n\n\nconst ForecastCharts = () => {\n  const [occupancyData, setOccupancyData] = useState(null);\n  const [bedsData, setBedsData] = useState(null);\n\n  useEffect(() => {\n    fetchOccupancyForecast().then((data) => {\n      const labels = Object.keys(data);\n      const values = Object.values(data);\n      setOccupancyData({\n        labels: labels,\n        datasets: [\n          {\n            label: \"Bed Occupancy Forecast (7 Days)\",\n            data: values,\n            fill: false,\n            borderColor: \"rgba(75, 192, 192, 1)\",\n            tension: 0.3,\n          },\n        ],\n      });\n    });\n\n    fetchBedsForecast().then((data) => {\n      const labels = data.map((item) => item.date);\n      const values = data.map((item) => item.predicted_beds);\n      setBedsData({\n        labels: labels,\n        datasets: [\n          {\n            label: \"Predicted Beds Forecast (30 Days)\",\n            data: values,\n            fill: false,\n            borderColor: \"rgba(153, 102, 255, 1)\",\n            tension: 0.3,\n          },\n        ],\n      });\n    });\n  }, []);\n\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: true,\n        position: \"top\",\n      },\n    },\n    scales: {\n      x: {\n        type: \"category\", // <-- important\n        title: {\n          display: true,\n          text: \"Date\",\n        },\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: \"Beds\",\n        },\n      },\n    },\n  };\n\n  return (\n    <div>\n      <h2>Forecast Charts</h2>\n\n      {occupancyData && (\n        <div>\n          <h3>Bed Occupancy Forecast (7 Days)</h3>\n          <Line data={occupancyData} options={chartOptions} />\n        </div>\n      )}\n\n      {bedsData && (\n        <div>\n          <h3>Predicted Beds Forecast (Next 30 Days)</h3>\n          <Line data={bedsData} options={chartOptions} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ForecastCharts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}